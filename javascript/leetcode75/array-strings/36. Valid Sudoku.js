// https://leetcode.com/problems/valid-sudoku/
// input [[".",".",".",".","5",".",".","1","."],[".","4",".","3",".",".",".",".","."],[".",".",".",".",".","3",".",".","1"],["8",".",".",".",".",".",".","2","."],[".",".","2",".","7",".",".",".","."],[".","1","5",".",".",".",".",".","."],[".",".",".",".",".","2",".",".","."],[".","2",".","9",".",".",".",".","."],[".",".","4",".",".",".",".",".","."]]
// Time Complexity n2
class Solution {
    isValidSudoku(board) {
        let V = {};
        let H = {};
        let Q = {};
        for (let x = 0; x < 9; x++) {
            for (let y = 0; y < 9; y++) {
                let value = board[x][y];
                let q = String(Math.floor(x / 3)) + String(Math.floor(y / 3));
                if (value !== ".") {
                    if ((value + "," + x) in V) {
                        return false;
                    } else if ((value + "," + y) in H) {
                        return false;
                    } else if ((value + "," + q) in Q) {
                        return false;
                    } else {
                        V[value + "," + x] = true;
                        H[value + "," + y] = true;
                        Q[value + "," + q] = true;
                    }
                }
            }
        }
        return true;
    }
}

let s = new Solution();
let board = [
    [".",".",".",".","5",".",".","1","."],
    [".","4",".","3",".",".",".",".","."],
    [".",".",".",".",".","3",".",".","1"],
    ["8",".",".",".",".",".",".","2","."],
    [".",".","2",".","7",".",".",".","."],
    [".","1","5",".",".",".",".",".","."],
    [".",".",".",".",".","2",".",".","."],
    [".","2",".","9",".",".",".",".","."],
    [".",".","4",".",".",".",".",".","."]
];
console.log(s.isValidSudoku(board)); 